from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    FSInputFile, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from pathlib import Path
import asyncio
import os
import csv
import logging
import sys

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    stream=sys.stdout,
)
logger = logging.getLogger("somaspace-specialists-bot")

# === –¢–æ–∫–µ–Ω ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set. Add it in Railway ‚Üí Settings ‚Üí Variables.")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
def get_main_menu():
    buttons = [
        [KeyboardButton(text="üå± –ß—Ç–æ —Ç–∞–∫–æ–µ S√µmaSpace")],
        [KeyboardButton(text="üìã –£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è")],
        [KeyboardButton(text="üß≠ –ü—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É")],
        [KeyboardButton(text="üí¨ –ö–∞–Ω–∞–ª –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤")],
        [KeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")],
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

WELCOME_CAPTION = (
    "–ü—Ä–∏–≤–µ—Ç üåø\n\n"
    "<b>S√µmaSpace</b> ‚Äî –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, "
    "–∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –ª—é–¥—å–º–∏ –±–µ—Ä–µ–∂–Ω–æ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –∂–∏–≤–æ.\n\n"
    "–ú—ã —Å–æ–µ–¥–∏–Ω—è–µ–º –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤, –∫–æ—É—á–µ–π –∏ —é—Ä–∏—Å—Ç–æ–≤ —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏, "
    "–≥–¥–µ –∑–∞–±–æ—Ç–∞ –æ –ª—é–¥—è—Ö —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫—É–ª—å—Ç—É—Ä–æ–π.\n\n"
    "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è?"
)

# === –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã ===
class SpecialistForm(StatesGroup):
    name = State()
    approach = State()
    experience = State()
    contact = State()

def save_specialist(user_id, name, approach, experience, contact):
    os.makedirs("data", exist_ok=True)
    file_path = "data/specialists.csv"
    file_exists = os.path.isfile(file_path)
    with open(file_path, "a", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        if not file_exists:
            writer.writerow(["user_id", "name", "approach", "experience", "contact"])
        writer.writerow([user_id, name, approach, experience, contact])
    logger.info("Saved specialist: %s | %s | %s", name, approach, contact)

# === /start ===
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    base_path = Path(__file__).parent
    image_path = base_path / "files" / "start_image.jpg"  # –¥–æ–±–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Å—é–¥–∞

    if image_path.exists():
        photo = FSInputFile(image_path)
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=photo,
            caption=WELCOME_CAPTION,
            parse_mode="HTML",
            reply_markup=get_main_menu(),
        )
    else:
        await message.answer(WELCOME_CAPTION, parse_mode="HTML", reply_markup=get_main_menu())

# === /menu ===
@dp.message(Command("menu"))
async def menu_cmd(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=get_main_menu())

# === –ß—Ç–æ —Ç–∞–∫–æ–µ S√µmaSpace ===
@dp.message(F.text == "üå± –ß—Ç–æ —Ç–∞–∫–æ–µ S√µmaSpace")
async def what_is_soma(message: types.Message):
    text = (
        "<b>S√µmaSpace</b> ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –∞ –∂–∏–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, "
        "–≥–¥–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –æ—Å—Ç–∞—ë—Ç—Å—è –≤ –∫–æ–Ω—Ç–∞–∫—Ç–µ —Å —Å–æ–±–æ–π –∏ –¥—Ä—É–≥–∏–º–∏.\n\n"
        "üåÄ –ú—ã –æ–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç –ª—é–¥—è–º –∏ –∫–æ–º–∞–Ω–¥–∞–º "
        "—Ä–∞—Å—Ç–∏ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ —á–µ–ª–æ–≤–µ—á–Ω–æ—Å—Ç–∏.\n\n"
        "–ó–¥–µ—Å—å –≤–∞–∂–Ω—ã –Ω–µ KPI, –∞ <b>–∂–∏–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏</b>: –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ, —Å–≤—è–∑—å –∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å."
    )
    await message.answer(text, parse_mode="HTML")

# === –£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è ===
@dp.message(F.text == "üìã –£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è")
async def conditions(message: types.Message):
    text = (
        "üí´ –î–ª—è —É—á–∞—Å—Ç–∏—è –≤–∞–∂–Ω–æ:\n"
        "‚Ä¢ –ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –≤ –ø—Ä–∏–∑–Ω–∞–Ω–Ω–æ–º –ø–æ–¥—Ö–æ–¥–µ,\n"
        "‚Ä¢ –ª–∏—á–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è –∏ —Å—É–ø–µ—Ä–≤–∏–∑–∏—è,\n"
        "‚Ä¢ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É –∏ –æ–±–º–µ–Ω—É –æ–ø—ã—Ç–æ–º.\n\n"
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫—É—é –º–æ–¥–µ–ª—å: –ø–æ—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø–æ–¥–¥–µ—Ä–∂–∫–∞, —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ –∂–∏–≤–∞—è —Å—Ä–µ–¥–∞."
    )
    await message.answer(text, parse_mode="HTML")

# === –ü—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É ===
@dp.message(F.text == "üß≠ –ü—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É")
async def start_form(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞—á–Ω—ë–º üåø –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", parse_mode="HTML")
    await state.set_state(SpecialistForm.name)

@dp.message(SpecialistForm.name)
async def form_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í –∫–∞–∫–æ–º –ø–æ–¥—Ö–æ–¥–µ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≥–µ—à—Ç–∞–ª—å—Ç, –∫–æ—É—á–∏–Ω–≥, —Ç–µ–ª–µ—Å–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è)", parse_mode="HTML")
    await state.set_state(SpecialistForm.approach)

@dp.message(SpecialistForm.approach)
async def form_approach(message: types.Message, state: FSMContext):
    await state.update_data(approach=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –ø—Ä–∞–∫—Ç–∏–∫–∏ —É –≤–∞—Å –∑–∞ –ø–ª–µ—á–∞–º–∏?", parse_mode="HTML")
    await state.set_state(SpecialistForm.experience)

@dp.message(SpecialistForm.experience)
async def form_experience(message: types.Message, state: FSMContext):
    await state.update_data(experience=message.text)
    await message.answer("–ö–∞–∫ —Å –≤–∞–º–∏ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è? (email, —Ç–µ–ª–µ—Ñ–æ–Ω, Telegram)", parse_mode="HTML")
    await state.set_state(SpecialistForm.contact)

@dp.message(SpecialistForm.contact)
async def form_contact(message: types.Message, state: FSMContext):
    data = await state.get_data()
    name = data.get("name")
    approach = data.get("approach")
    experience = data.get("experience")
    contact = message.text
    save_specialist(message.from_user.id, name, approach, experience, contact)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ üå±\n\n"
        "–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É. –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–æ–π–¥—ë—Ç ‚Äî —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ª–∏—á–Ω–æ.\n\n"
        "–ê –ø–æ–∫–∞ –º–æ–∂–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ üëá",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ö–∞–Ω–∞–ª S√µmaSpace ‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã", url="https://t.me/somaspace_pro")]
            ]
        ),
    )
    await state.clear()

# === –ö–∞–Ω–∞–ª –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ ===
@dp.message(F.text == "üí¨ –ö–∞–Ω–∞–ª –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤")
async def channel_link(message: types.Message):
    text = (
        "–í –∫–∞–Ω–∞–ª–µ ‚Äî —Ç–µ–∫—Å—Ç—ã, –∫–µ–π—Å—ã –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏ –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ –∂–∏–≤–æ–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–∏ –≤ —Ä–∞–±–æ—Ç–µ.\n\n"
        "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –ø–æ—Ç–æ–∫–µ <b>S√µmaSpace</b> üåø"
    )
    link_button = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª", url="https://t.me/somaspace_pro")]]
    )
    await message.answer(text, parse_mode="HTML", reply_markup=link_button)

# === –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ===
@dp.message(F.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_question(message: types.Message):
    await message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî –º—ã –æ—Ç–≤–µ—Ç–∏–º –ª–∏—á–Ω–æ –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–∏–º –∫ –Ω—É–∂–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É üí´",
        parse_mode="HTML",
    )

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_my_commands([
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å"),
        BotCommand(command="menu", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
    ])
    logger.info("S√µmaSpace Specialists Bot started ‚úÖ")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
